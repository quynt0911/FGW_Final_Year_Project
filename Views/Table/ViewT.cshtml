@using Blank.Models
@model IEnumerable<Table>
@{
    Layout = "~/Views/Shared/UserLO.cshtml";
}

<!-- Title and Instructions -->
<h1 style="text-align: center; margin-top: 20px;">Tables Diagram</h1>
<p style="text-align: center; font-size: 14px;">Drag and drop tables to arrange them. Double-click a table to view its
    details. Click "Submit" to save changes.</p>

<!-- Drop Area for Tables -->
<div id="dropArea"
    style="position: relative; width: 100%; height: 500px; border: 1px solid black; overflow: hidden; background-image: url('/images/restaurant-background.jpg'); background-size: cover; background-position: center;">
    @foreach (var table in Model)
    {
        <div class="draggable" draggable="true" data-id="@table.TableId"
            style="position: absolute; top: @(table.Location?.Split(',')[0] ?? "0")px; left: @(table.Location?.Split(',')[1] ?? "0")px;
                    width: 50px; height: 50px; background-color: lightblue; text-align: center; line-height: 50px; cursor: move; border-radius: 5px;">
            @table.TName
        </div>
    }
</div>

<!-- Action Buttons -->
<div style="margin-top: 20px; text-align: center;">
    <button id="submitBtn"
        style="padding: 10px 20px; background-color: green; color: white; border: none; cursor: pointer;">Submit</button>
    <button id="selectTableBtn"
        style="padding: 10px 20px; background-color: blue; color: white; border: none; cursor: pointer; margin-right: 10px;">Select
        Table</button>
</div>

<!-- Confirmation Modal -->
<div id="confirmationModal"
    style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border: 1px solid black; z-index: 1000;">
    <h3>Are you sure you want to save the new positions?</h3>
    <button id="confirmYes"
        style="padding: 10px 20px; background-color: green; color: white; border: none; cursor: pointer;">Yes</button>
    <button id="confirmNo"
        style="padding: 10px 20px; background-color: red; color: white; border: none; cursor: pointer;">No</button>
</div>

<!-- Retry Modal -->
<div id="retryModal"
    style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border: 1px solid black; z-index: 2000;">
    <h3>Tables cannot overlap!</h3>
    <button id="retryBtn"
        style="padding: 10px 20px; background-color: orange; color: white; border: none; cursor: pointer;">Retry</button>
</div>

<!-- Table Details Modal -->
<div id="tableModal"
    style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border: 1px solid black; z-index: 1000;">
    <h2>Table Details</h2>
    <p id="tableDetails"></p>
    <button onclick="closeModal()">Close</button>
</div>

<script>
    const tablesData = [];
    const previousPositions = {};
    let selectedTableId = null;
    let selectedTableName = null;

    document.querySelectorAll('.draggable').forEach(element => {
        const tableId = element.dataset.id;

        // Store initial positions
        previousPositions[tableId] = {
            top: parseInt(element.style.top, 10) || 0,
            left: parseInt(element.style.left, 10) || 0,
        };

        document.getElementById('selectTableBtn').addEventListener('click', () => {
            if (!selectedTableId || !selectedTableName) {
                alert("Please select a table before proceeding.");
                return;
            }

            // Lưu dữ liệu vào sessionStorage
            sessionStorage.setItem("selectedTableId", selectedTableId);
            sessionStorage.setItem("selectedTableName", selectedTableName);

            // Chuyển hướng về trang Make Reservation
            window.location.href = "/Reservation/MakeReservation";
        });


        // Drag End Event
        element.addEventListener('dragend', (e) => {
            const dropArea = document.getElementById("dropArea").getBoundingClientRect();
            const newTop = e.clientY - dropArea.top;
            const newLeft = e.clientX - dropArea.left;

            // Check if out of bounds
            if (newTop < 0 || newLeft < 0 || newTop + 50 > dropArea.height || newLeft + 50 > dropArea.width) {
                alert("Cannot move table outside the area.");
                resetAllTables();
                return;
            }

            // Check collision
            if (checkCollision(element, newTop, newLeft)) {
                alert("Cannot overlap with other tables.");
                resetAllTables();
                return;
            }

            // Update new position
            element.style.top = `${Math.round(newTop)}px`;
            element.style.left = `${Math.round(newLeft)}px`;

            const tableIndex = tablesData.findIndex(t => t.tableId === tableId);
            if (tableIndex >= 0) {
                tablesData[tableIndex].location = `${Math.round(newTop)},${Math.round(newLeft)}`;
            } else {
                tablesData.push({ tableId: tableId, location: `${Math.round(newTop)},${Math.round(newLeft)}` });
            }
        });

        // Click Event to Select Table
        element.addEventListener('click', () => {
            document.querySelectorAll('.draggable').forEach(el => el.style.border = '2px solid transparent');
            element.style.border = '2px solid blue';
            selectedTableId = tableId;
            selectedTableName = element.textContent.trim();
        });
    });

    // Reset Tables to Initial Positions
    function resetAllTables() {
        Object.keys(previousPositions).forEach(tableId => {
            const element = document.querySelector(`.draggable[data-id="${tableId}"]`);
            element.style.top = previousPositions[tableId].top + "px";
            element.style.left = previousPositions[tableId].left + "px";
        });
    }

    function checkCollision(currentElement, newTop, newLeft) {
        const currentRect = { top: newTop, left: newLeft, right: newLeft + 50, bottom: newTop + 50 };
        let collisionDetected = false;

        document.querySelectorAll('.draggable').forEach(other => {
            if (currentElement === other) return;

            const otherRect = {
                top: parseInt(other.style.top, 10),
                left: parseInt(other.style.left, 10),
                right: parseInt(other.style.left, 10) + 50,
                bottom: parseInt(other.style.top, 10) + 50,
            };

            if (
                currentRect.left < otherRect.right &&
                currentRect.right > otherRect.left &&
                currentRect.top < otherRect.bottom &&
                currentRect.bottom > otherRect.top
            ) {
                collisionDetected = true;
            }
        });

        return collisionDetected;
    }

    // Submit Button Logic
    document.getElementById('submitBtn').addEventListener('click', async () => {
        if (tablesData.length === 0) {
            alert("No changes to save.");
            return;
        }

        try {
            const response = await fetch('/Table/UpdateAllPositions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(tablesData),
            });

            if (response.ok) {
                alert('Table positions updated successfully!');
                location.reload();
            } else {
                alert('Failed to update table positions.');
            }
        } catch (error) {
            alert('Server error: ' + error.message);
        }
    });

    // Select Table Button Logic
    document.getElementById('selectTableBtn').addEventListener('click', () => {
        if (!selectedTableId || !selectedTableName) {
            alert("Please select a table before proceeding.");
            return;
        }

        sessionStorage.setItem("selectedTableId", selectedTableId);
        sessionStorage.setItem("selectedTableName", selectedTableName);

        // Redirect to Make Reservation page
        window.location.href = "/Reservation/MakeReservation";
    });
</script>

<style>
    #dropArea {
        position: relative;
        width: 100%;
        height: 500px;
        border: 1px solid black;
        background-image: url('/images/restaurant-background.jpg');
        background-size: cover;
        background-position: center;
        overflow: hidden;
    }

    .draggable {
        position: absolute;
        width: 50px;
        height: 50px;
        background-color: lightblue;
        text-align: center;
        line-height: 50px;
        border-radius: 5px;
        cursor: move;
        border: 2px solid transparent;
        transition: all 0.2s ease;
    }

    .draggable:hover {
        background-color: skyblue;
    }

    .draggable.selected {
        border: 2px solid blue;
    }

    #selectTableBtn {
        padding: 10px 20px;
        background-color: blue;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-right: 10px;
    }

    #selectTableBtn:hover {
        background-color: darkblue;
    }

    #submitBtn {
        padding: 10px 20px;
        background-color: green;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    #submitBtn:hover {
        background-color: darkgreen;
    }
</style>
