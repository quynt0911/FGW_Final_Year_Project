@using Blank.Models
@model IEnumerable<Table>
@{
    Layout = "~/Views/Shared/AdminLO.cshtml";
}

<!-- Title and Instructions -->
<h1 style="text-align: center; margin-top: 20px;">Tables Diagram</h1>
<p style="text-align: center; font-size: 14px;">Drag and drop tables to arrange them. Double-click a table to view its
    details. Click "Submit" to save changes.</p>

<!-- Drop Area for Tables -->
<div id="dropArea" style="position: relative; width: 100%; height: 500px; 
    border: 1px solid black; overflow: hidden; background-image: url('/images/restaurant-background.jpg'); 
    background-size: cover; background-position: center;">
    @if (Model != null && Model.Any())
    {
        @foreach (var table in Model)
        {
            <div class="draggable" draggable="true" data-id="@table.TableId"
                style="position: absolute; top: @(table.Location?.Split(',')[0] ?? "0")px; left: @(table.Location?.Split(',')[1] ?? "0")px;
                    width: 50px; height: 50px; background-color: lightblue; text-align: center; line-height: 50px; cursor: move; border-radius: 5px;">
                @table.TName
            </div>
        }
    }
    else
    {
        <p>No tables available to display.</p>
    }
</div>

<!-- Action Buttons -->
<div style="margin-top: 20px; text-align: center;">
    <button id="submitBtn"
        style="padding: 10px 20px; background-color: green; color: white; border: none; cursor: pointer;">Save</button>
    @* <button id="resetBtn"
    style="padding: 10px 20px; background-color: orange; color: white; border: none; cursor: pointer;">Reset</button> *@
</div>

<!-- Confirmation Modal -->
<div id="confirmationModal"
    style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border: 1px solid black; z-index: 1000;">
    <h3>Are you sure you want to save the new positions?</h3>
    <button id="confirmYes"
        style="padding: 10px 20px; background-color: green; color: white; border: none; cursor: pointer;">Yes</button>
    <button id="confirmNo"
        style="padding: 10px 20px; background-color: red; color: white; border: none; cursor: pointer;">No</button>
</div>

<!-- Retry Modal -->
<div id="retryModal"
    style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border: 1px solid black; z-index: 2000;">
    <h3>Tables cannot overlap!</h3>
    <button id="retryBtn"
        style="padding: 10px 20px; background-color: orange; color: white; border: none; cursor: pointer;">Retry</button>
</div>

<!-- Table Details Modal -->
<div id="tableModal"
    style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border: 1px solid black; z-index: 1000;">
    <h2>Table Details</h2>
    <p id="tableDetails"></p>
    <button onclick="closeModal()">Close</button>
</div>

<script>
    const tablesData = [];
    const previousPositions = {};

    document.querySelectorAll('.draggable').forEach(element => {
        const tableId = element.dataset.id;

        // Store initial positions
        previousPositions[tableId] = {
            top: parseInt(element.style.top, 10) || 0,
            left: parseInt(element.style.left, 10) || 0,
        };

        // Drag End Event
        element.addEventListener('dragend', (e) => {
            const dropArea = document.getElementById("dropArea").getBoundingClientRect();
            const newTop = e.clientY - dropArea.top;
            const newLeft = e.clientX - dropArea.left;

            // Check if out of bounds
            if (newTop < 0 || newLeft < 0 || newTop + 50 > dropArea.height || newLeft + 50 > dropArea.width) {
                alert("Cannot move table outside the area.");
                resetAllTables();
                return;
            }

            // Check collision
            if (checkCollision(element, newTop, newLeft)) {
                showRetryModal();
                return;
            }

            // Update new position
            element.style.top = newTop + "px";
            element.style.left = newLeft + "px";

            const tableIndex = tablesData.findIndex(t => t.tableId === tableId);
            if (tableIndex >= 0) {
                tablesData[tableIndex].location = `${newTop},${newLeft}`;
            } else {
                tablesData.push({ tableId: tableId, location: `${newTop},${newLeft}` });
            }
        });

        // Double Click Event to Show Details
        element.addEventListener('dblclick', async () => {
            const tableId = element.dataset.id;
            try {
                const response = await fetch(`/Table/DetailsApi/${tableId}`);
                if (!response.ok) throw new Error("Failed to fetch details.");
                const tableData = await response.json();
                openModal(`Name: ${tableData.tName}, Status: ${tableData.tStatus}, Location: ${tableData.location}`);
            } catch (error) {
                alert("Unable to fetch table details. Error: " + error.message);
            }
        });
    });

    // Functions
    function openModal(details) {
        const modal = document.getElementById("tableModal");
        document.getElementById("tableDetails").innerText = details;
        modal.style.display = "block";
    }

    function closeModal() {
        document.getElementById("tableModal").style.display = "none";
    }

    function checkCollision(currentElement, newTop, newLeft) {
        const currentRect = { top: newTop, left: newLeft, right: newLeft + 50, bottom: newTop + 50 };
        let collisionDetected = false;

        document.querySelectorAll('.draggable').forEach(other => {
            if (currentElement === other) return;

            const otherRect = {
                top: parseInt(other.style.top, 10),
                left: parseInt(other.style.left, 10),
                right: parseInt(other.style.left, 10) + 50,
                bottom: parseInt(other.style.top, 10) + 50,
            };

            if (
                currentRect.left < otherRect.right &&
                currentRect.right > otherRect.left &&
                currentRect.top < otherRect.bottom &&
                currentRect.bottom > otherRect.top
            ) {
                collisionDetected = true;
            }
        });

        return collisionDetected;
    }

    function resetAllTables() {
        Object.keys(previousPositions).forEach(tableId => {
            const element = document.querySelector(`.draggable[data-id="${tableId}"]`);
            element.style.top = previousPositions[tableId].top + "px";
            element.style.left = previousPositions[tableId].left + "px";
        });
        hideRetryModal();
    }

    function showRetryModal() {
        document.getElementById("retryModal").style.display = "block";
    }

    function hideRetryModal() {
        document.getElementById("retryModal").style.display = "none";
    }

    document.getElementById('retryBtn').addEventListener('click', resetAllTables);

    document.getElementById('submitBtn').addEventListener('click', () => {
        if (tablesData.length === 0) {
            alert('No changes to save.');
            return;
        }

        // Check collisions before submit
        let collisionExists = false;
        document.querySelectorAll('.draggable').forEach(el => {
            const newTop = parseInt(el.style.top, 10);
            const newLeft = parseInt(el.style.left, 10);
            if (checkCollision(el, newTop, newLeft)) collisionExists = true;
        });

        if (collisionExists) {
            alert("Cannot save. Tables are overlapping.");
            return;
        }

        document.getElementById('confirmationModal').style.display = 'block';
    });

    document.getElementById('confirmYes').addEventListener('click', async () => {
        try {
            const response = await fetch('/Table/UpdateAllPositions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(tablesData),
            });
            if (response.ok) {
                alert('Table positions updated successfully!');
                location.reload();
            } else {
                alert('Failed to update table positions.');
            }
        } catch (error) {
            alert('Server error: ' + error.message);
        }
    });

    document.getElementById('confirmNo').addEventListener('click', () => {
        document.getElementById('confirmationModal').style.display = 'none';
    });
</script>
<style>
    #dropArea {
    position: relative;
    width: 100%;
    height: 500px;
    border: 1px solid #ccc; /* Viền nhạt */
    background-color: #f9f9f9; /* Nền sáng */
    background-size: cover;
    background-position: center;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Hiệu ứng đổ bóng */
}

.draggable {
    position: absolute;
    width: 60px; /* Kích thước lớn hơn */
    height: 60px;
    background-color: #4caf50; /* Màu xanh lá nổi bật */
    color: white; /* Màu chữ */
    font-weight: bold; /* Chữ đậm */
    text-align: center;
    line-height: 60px;
    border-radius: 8px; /* Góc bo mềm mại */
    cursor: grab; /* Con trỏ kéo */
    transition: all 0.3s ease; /* Hiệu ứng hover mượt mà */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Đổ bóng bàn */
}

.draggable:hover {
    background-color: #45a049; /* Màu xanh lá đậm khi hover */
}

#confirmationModal,
#retryModal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #fff; /* Nền trắng */
    padding: 20px;
    border: 1px solid #ddd; /* Viền xám nhạt */
    z-index: 1000;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Hiệu ứng đổ bóng */
    border-radius: 10px; /* Góc bo tròn */
}

#confirmationModal h3,
#retryModal h3 {
    margin-bottom: 20px;
    font-size: 18px; /* Cỡ chữ vừa phải */
    text-align: center;
    color: #333; /* Màu chữ xám đậm */
}

#confirmationModal button,
#retryModal button {
    margin: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 5px; /* Nút bo tròn */
    cursor: pointer;
}

#confirmationModal button#confirmYes {
    background-color: #4caf50; /* Màu xanh lá */
    color: white; /* Chữ trắng */
}

#confirmationModal button#confirmNo {
    background-color: #f44336; /* Màu đỏ */
    color: white; /* Chữ trắng */
}

#retryModal button#retryBtn {
    background-color: #ff9800; /* Màu cam */
    color: white; /* Chữ trắng */
}

#tableModal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white; /* Nền trắng */
    padding: 20px;
    border: 1px solid black;
    z-index: 1500;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2); /* Hiệu ứng đổ bóng */
    border-radius: 10px; /* Bo tròn */
}

#tableModal h2 {
    margin-bottom: 10px;
    text-align: center;
    font-size: 20px; /* Cỡ chữ tiêu đề */
}

#tableModal p {
    text-align: left;
    font-size: 14px; /* Cỡ chữ nội dung */
    line-height: 1.5;
}

#tableModal button {
    display: block;
    margin: 20px auto 0 auto;
    padding: 10px 20px;
    background-color: blue;
    color: white;
    border: none;
    border-radius: 5px; /* Bo tròn nút */
    cursor: pointer;
}

#tableModal button:hover {
    background-color: darkblue; /* Màu xanh đậm khi hover */
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    opacity: 0.9; /* Hiệu ứng nhấn nút */
}

</style>